name: Test ScanCode Output

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üì¶ Install ScanCode Toolkit
        run: |
          set -eux  # fail fast (-e), print commands (-x), treat unset vars as error (-u)
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure 
               
    #  - name: üîç Verify dummy file presence
    #    run: |
    #     echo "Listing files under src/lodash:"
    #     ls -R src/lodash
    #     echo "Showing dummy-gpl-file.js content:"
    #     cat src/lodash/dummy-gpl-file.js

      - name: üöÄ Run ScanCode
        run: |
          set -eux
          ./scancode-toolkit/scancode -clpeui \
            --json-pp scan-output.json \
            src/lodash

      - name: üìÑ Show last 20 lines of scan-output.json
        run: |
         set -eux
         ls -l scan-output.json
         tail -n 20 scan-output.json

#      - name: üìú Show detected licenses
#        run: |
#          echo "Detected licenses:"
#          jq -r '.. | .license_expression? // empty' scan-output.json | sort -u

      - name: üìú Show detected license expressions
        run: |
          jq -r '
            .files[]
            | (.detected_license_expression_spdx // .detected_license_expression // .license_expression)
            | select(. != null)
          ' scan-output.json | sort -u

      - name: Check for risky licenses
        run: |
          set -euo pipefail

          echo "üîé Extracting SPDX licenses from scan report..."

          jq -r '
            .files[]
            | select(.type=="file")
            | {
                path: .path,
                licenses: [.license_detections[]? | select(.from_spdx==true) | .license_expression_spdx] | unique
              }
            | select(.licenses | length > 0)
            | "\(.path)\t\(.licenses | join(\", \") )"
          ' uuid-scan.json > detected_licenses.txt

          echo "Detected licenses:"
          cat detected_licenses.txt || true

          risky_list="gpl-1.0-or-later gpl-2.0-only gpl-2.0-or-later gpl-3.0-only gpl-3.0-or-later agpl-3.0-only agpl-3.0-or-later sspl-1.0"

          sole_risky=0
          multi_risky=0

          while IFS=$'\t' read -r path licenses; do
            for risky in $risky_list; do
              if [[ "$licenses" == "$risky" ]]; then
                echo "‚ùå Sole risky license detected in: $path  [$licenses]"
                sole_risky=$((sole_risky+1))
              elif [[ "$licenses" == *"$risky"* ]]; then
                echo "‚ö†Ô∏è  Risky license present in multi-licensed file: $path  [$licenses]"
                multi_risky=$((multi_risky+1))
              fi
            done
          done < detected_licenses.txt

          echo "üìä Summary: $sole_risky sole risky licenses, $multi_risky multi-license warnings"

          if [ $sole_risky -gt 0 ]; then
            echo "‚ùå Build failed due to risky license(s)."
            exit 1
          fi

      

         # - name: üîç Inspect first file object
     #   run: |
     #    jq '.files[0]' scan-output.json

      - name: üìú Show licenses grouped by files
        run: |
          BLUE='\033[1;34m'
          GREEN='\033[1;32m'
          RESET='\033[0m'

          echo -e "${BLUE}üìä Licenses and associated files:${RESET}"
          jq '
            .files[]
            | select(.detected_license_expression != null and .detected_license_expression != "")
            | {license: .detected_license_expression, file: .path}
          ' scan-output.json \
          | jq -s -r '
              group_by(.license)[] |
              "License: " + .[0].license + "\n" +
              (map(.file) | unique | sort | map("  - " + .) | join("\n")) +
              "\n"
            ' \
          | while IFS= read -r line; do
              if [[ "$line" == License:* ]]; then
                echo -e "License: ${GREEN}${line#License: }${RESET}"
              else
                echo "$line"
              fi
            done






    

          
