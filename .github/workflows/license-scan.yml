name: Test ScanCode Output

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üì¶ Install ScanCode Toolkit
        run: |
          set -eux  # fail fast (-e), print commands (-x), treat unset vars as error (-u)
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure

      - name: üöÄ Run ScanCode
        run: |
          set -eux
          ./scancode-toolkit/scancode -clpeui \
            --json-pp scan-output.json \
            src/lodash

            - name: ‚ùå Fail if exclusive GPL/AGPL license detected
        run: |
          set -eux
          # Define GPL/AGPL licenses (lowercase)
          GPL_LICENSES=(
            "gpl-2.0-only"
            "gpl-2.0-or-later"
            "gpl-3.0-only"
            "gpl-3.0-or-later"
            "agpl-3.0-only"
            "agpl-3.0-or-later"
          )

          # Extract license expressions from scan output
          mapfile -t licenses < <(jq -r '.files[].detected_license_expression // empty' scan-output.json)

          for expr in "${licenses[@]}"; do
            # Lowercase expression
            expr_lower=$(echo "$expr" | tr '[:upper:]' '[:lower:]')

            # Replace AND/OR with newline to split licenses
            IFS=$'\n' read -r -a parts < <(echo "$expr_lower" | sed -E 's/\s+(and|or)\s+/\n/g')

            count=${#parts[@]}

            if [ "$count" -eq 1 ]; then
              lic="${parts[0]}"
              for gpl_lic in "${GPL_LICENSES[@]}"; do
                if [ "$lic" = "$gpl_lic" ]; then
                  echo "ERROR: File licensed exclusively under GPL/AGPL: $expr"
                  exit 1
                fi
              done
            else
              echo "INFO: Multi-licensed file, skipping fail: $expr"
            fi
          done

      - name: üìÑ Show last 20 lines of scan-output.json
        run: |
         set -eux
         ls -l scan-output.json
         tail -n 20 scan-output.json

      - name: üìú Show detected licenses
        run: |
          echo "Detected licenses:"
          jq -r '.. | .license_expression? // empty' scan-output.json | sort -u

     # - name: üîç Inspect first file object
     #   run: |
     #    jq '.files[0]' scan-output.json

      - name: üìú Show licenses grouped by files
        run: |
          BLUE='\033[1;34m'
          GREEN='\033[1;32m'
          RESET='\033[0m'

          echo -e "${BLUE}üìä Licenses and associated files:${RESET}"
          jq '
            .files[]
            | select(.detected_license_expression != null and .detected_license_expression != "")
            | {license: .detected_license_expression, file: .path}
          ' scan-output.json \
          | jq -s -r '
              group_by(.license)[] |
              "License: " + .[0].license + "\n" +
              (map(.file) | unique | sort | map("  - " + .) | join("\n")) +
              "\n"
            ' \
          | while IFS= read -r line; do
              if [[ "$line" == License:* ]]; then
                echo -e "License: ${GREEN}${line#License: }${RESET}"
              else
                echo "$line"
              fi
            done






    

          
