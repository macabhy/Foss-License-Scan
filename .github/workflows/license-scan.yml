name: Test ScanCode Output

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 📦 Install ScanCode Toolkit
        run: |
          set -eux  # fail fast (-e), print commands (-x), treat unset vars as error (-u)
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure 
               
    #  - name: 🔍 Verify dummy file presence
    #    run: |
    #     echo "Listing files under src/lodash:"
    #     ls -R src/lodash
    #     echo "Showing dummy-gpl-file.js content:"
    #     cat src/lodash/dummy-gpl-file.js

      - name: 🚀 Run ScanCode
        run: |
          set -eux
          ./scancode-toolkit/scancode -clpeui \
            --json-pp scan-output.json \
            src/lodash

      - name: 📄 Show last 20 lines of scan-output.json
        run: |
         set -eux
         ls -l scan-output.json
         tail -n 20 scan-output.json

#      - name: 📜 Show detected licenses
#        run: |
#          echo "Detected licenses:"
#          jq -r '.. | .license_expression? // empty' scan-output.json | sort -u

      - name: 📜 Show detected license expressions
        run: |
          jq -r '
            .files[]
            | (.detected_license_expression_spdx // .detected_license_expression // .license_expression)
            | select(. != null)
          ' scan-output.json | sort -u

      - name: 🔍 Check for risky licenses
        run: |
          set -eux
          echo "🔍 Checking for risky licenses..."

          # List of risky strong copyleft licenses
          risky_licenses='["gpl-1.0","gpl-2.0","gpl-3.0","agpl-1.0","agpl-3.0"]'

          # Collect files with sole risky licenses
          risky_files=$(jq -r \
            --argjson risky "$risky_licenses" '
              .files[] 
              | select(.license_expressions != null) 
              | . as $f 
              | (.license_expressions | unique) as $exprs 
              | if ($exprs | length == 1 and ($exprs[0] as $e | $risky | index($e))) 
                then "\($f.path)  [\($exprs[0])]" 
                else empty 
                end
            ' scan-output.json)

          # Collect files with risky licenses as part of multi-license expressions
          risky_multis=$(jq -r \
            --argjson risky "$risky_licenses" '
              .files[] 
              | select(.license_expressions != null) 
              | . as $f 
              | (.license_expressions | unique) as $exprs 
              | select($exprs | length > 1 and any(. as $e | $risky | index($e)))
              | "\($f.path)  [\($exprs | join(" AND "))]"
            ' scan-output.json)

          if [ -n "$risky_multis" ]; then
            echo "⚠️  Risky licenses present in multi-licensed files (warning only):"
            echo "$risky_multis"
          fi

          if [ -n "$risky_files" ]; then
            echo "🚫 Sole risky copyleft licenses detected in these files:"
            echo "$risky_files"
            exit 1
          else
            echo "✅ Build passed: no sole risky copyleft licenses found."
          fi

          echo "📜 Detected licenses:"
          jq -r '.files[].license_expressions[]?' scan-output.json | sort -u

      


     # - name: 🔍 Inspect first file object
     #   run: |
     #    jq '.files[0]' scan-output.json

      - name: 📜 Show licenses grouped by files
        run: |
          BLUE='\033[1;34m'
          GREEN='\033[1;32m'
          RESET='\033[0m'

          echo -e "${BLUE}📊 Licenses and associated files:${RESET}"
          jq '
            .files[]
            | select(.detected_license_expression != null and .detected_license_expression != "")
            | {license: .detected_license_expression, file: .path}
          ' scan-output.json \
          | jq -s -r '
              group_by(.license)[] |
              "License: " + .[0].license + "\n" +
              (map(.file) | unique | sort | map("  - " + .) | join("\n")) +
              "\n"
            ' \
          | while IFS= read -r line; do
              if [[ "$line" == License:* ]]; then
                echo -e "License: ${GREEN}${line#License: }${RESET}"
              else
                echo "$line"
              fi
            done






    

          
