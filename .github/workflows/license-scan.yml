name: Test ScanCode Output

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 📦 Install ScanCode Toolkit
        run: |
          set -eux  # fail fast (-e), print commands (-x), treat unset vars as error (-u)
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure

      - name: 🚀 Run ScanCode
        run: |
          set -eux
          ./scancode-toolkit/scancode -clpeui \
            --json-pp scan-output.json \
            src/lodash

      - name: 📄 Show last 20 lines of scan-output.json
        run: |
         set -eux
         ls -l scan-output.json
         tail -n 20 scan-output.json

      - name: 📜 Show detected licenses
        run: |
          echo "Detected licenses:"
          jq -r '.. | .license_expression? // empty' scan-output.json | sort -u

      - name: Check for risky-only licenses
        run: |
          risky_files=$(jq -r '
            .files[]
            | select(.license_expression != null)
            | select(
                (.license_expression | test("gpl-2.0|gpl-3.0|agpl-3.0"; "i"))
                and
                (.license_expression | test("mit|bsd|apache-2.0"; "i") | not)
              )
            | .path
          ' scancode-output.json)

          if [ -n "$risky_files" ]; then
            echo "❌ Build failed due to risky-only licenses:"
            echo "$risky_files"
            exit 1
          else
            echo "✅ No risky-only licenses found. Continuing..."
          fi
          
     # - name: 🔍 Inspect first file object
     #   run: |
     #    jq '.files[0]' scan-output.json

      - name: 📜 Show licenses grouped by files
        run: |
          BLUE='\033[1;34m'
          GREEN='\033[1;32m'
          RESET='\033[0m'

          echo -e "${BLUE}📊 Licenses and associated files:${RESET}"
          jq '
            .files[]
            | select(.detected_license_expression != null and .detected_license_expression != "")
            | {license: .detected_license_expression, file: .path}
          ' scan-output.json \
          | jq -s -r '
              group_by(.license)[] |
              "License: " + .[0].license + "\n" +
              (map(.file) | unique | sort | map("  - " + .) | join("\n")) +
              "\n"
            ' \
          | while IFS= read -r line; do
              if [[ "$line" == License:* ]]; then
                echo -e "License: ${GREEN}${line#License: }${RESET}"
              else
                echo "$line"
              fi
            done






    

          
