name: Test ScanCode Output

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 📦 Install ScanCode Toolkit
        run: |
          set -eux  # fail fast (-e), print commands (-x), treat unset vars as error (-u)
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure 
               
    #  - name: 🔍 Verify dummy file presence
    #    run: |
    #     echo "Listing files under src/lodash:"
    #     ls -R src/lodash
    #     echo "Showing dummy-gpl-file.js content:"
    #     cat src/lodash/dummy-gpl-file.js

      - name: 🚀 Run ScanCode
        run: |
          set -eux
          ./scancode-toolkit/scancode -clpeui \
            --json-pp scan-output.json \
            src/lodash

      - name: 📄 Show last 20 lines of scan-output.json
        run: |
         set -eux
         ls -l scan-output.json
         tail -n 20 scan-output.json

      - name: 📜 Show detected licenses
        run: |
          echo "Detected licenses:"
          jq -r '.. | .license_expression? // empty' scan-output.json | sort -u

      - name: Check for risky copyleft licenses
        run: |
          echo "🔍 Checking for risky licenses..."
          RISKY_LICENSES=("gpl-1.0" "gpl-2.0" "gpl-3.0" "gpl-2.0+" "gpl-3.0+" "agpl-1.0" "agpl-3.0")
          FOUND_RISKY=0

          # Loop through risky licenses
          for lic in "${RISKY_LICENSES[@]}"; do
            # Find files where risky license is the ONLY license (no OR permissive license)
            MATCHED_FILES=$(jq -r \
              --arg lic "$lic" \
              '.files[] | select(.license_expression == $lic) | .path' scan-output.json)

            if [[ -n "$MATCHED_FILES" ]]; then
              FOUND_RISKY=1
              echo "🚫 Risky license detected: $lic"
              echo "$MATCHED_FILES" | while read -r file; do
                echo "   - $file"
              done
            fi
          done

          if [[ $FOUND_RISKY -eq 1 ]]; then
            echo "❌ Build failed due to risky copyleft licenses."
            exit 1
          else
            echo "✅ No sole risky copyleft licenses detected."
            echo "📜 Detected licenses:"
            jq -r '.files[].license_expression' scan-output.json | sort -u
          fi


     # - name: 🔍 Inspect first file object
     #   run: |
     #    jq '.files[0]' scan-output.json

      - name: 📜 Show licenses grouped by files
        run: |
          BLUE='\033[1;34m'
          GREEN='\033[1;32m'
          RESET='\033[0m'

          echo -e "${BLUE}📊 Licenses and associated files:${RESET}"
          jq '
            .files[]
            | select(.detected_license_expression != null and .detected_license_expression != "")
            | {license: .detected_license_expression, file: .path}
          ' scan-output.json \
          | jq -s -r '
              group_by(.license)[] |
              "License: " + .[0].license + "\n" +
              (map(.file) | unique | sort | map("  - " + .) | join("\n")) +
              "\n"
            ' \
          | while IFS= read -r line; do
              if [[ "$line" == License:* ]]; then
                echo -e "License: ${GREEN}${line#License: }${RESET}"
              else
                echo "$line"
              fi
            done






    

          
