name: Test ScanCode Output

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üì¶ Install ScanCode Toolkit
        run: |
          set -eux  # fail fast (-e), print commands (-x), treat unset vars as error (-u)
          git clone https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./configure 
               
    #  - name: üîç Verify dummy file presence
    #    run: |
    #     echo "Listing files under src/lodash:"
    #     ls -R src/lodash
    #     echo "Showing dummy-gpl-file.js content:"
    #     cat src/lodash/dummy-gpl-file.js

   #   - name: üöÄ Run ScanCode
   #     run: |
   #       set -eux
   #       ./scancode-toolkit/scancode -clpeui \
   #         --json-pp scan-output.json \
   #         src/lodash

      - name: üöÄ Run ScanCode
        run: |
          set -eux
          # Derive branch name from GITHUB_REF
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "Detected branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "scan-jquery-mobile" ]]; then
            TARGET="src/jquery-mobile-1.4.5"
          else
            TARGET="src/lodash"
          fi

          echo "Scanning target: $TARGET"

          ./scancode-toolkit/scancode -clpeui \
            --json-pp scan-output.json \
            "$TARGET"



      - name: üìÑ Show last 20 lines of scan-output.json
        run: |
         set -eux
         ls -l scan-output.json
         tail -n 20 scan-output.json

#      - name: üìú Show detected licenses
#        run: |
#          echo "Detected licenses:"
#          jq -r '.. | .license_expression? // empty' scan-output.json | sort -u

      - name: üìú Show detected license expressions
        run: |
          jq -r '
            .files[]
            | (.detected_license_expression_spdx // .detected_license_expression // .license_expression)
            | select(. != null)
          ' scan-output.json | sort -u

    

         # - name: üîç Inspect first file object
     #   run: |
     #    jq '.files[0]' scan-output.json

      - name: üìú Show licenses grouped by files
        run: |
          BLUE='\033[1;34m'
          GREEN='\033[1;32m'
          RESET='\033[0m'

          echo -e "${BLUE}üìä Licenses and associated files:${RESET}"
          jq '
            .files[]
            | select(.detected_license_expression != null and .detected_license_expression != "")
            | {license: .detected_license_expression, file: .path}
          ' scan-output.json \
          | jq -s -r '
              group_by(.license)[] |
              "License: " + .[0].license + "\n" +
              (map(.file) | unique | sort | map("  - " + .) | join("\n")) +
              "\n"
            ' \
          | while IFS= read -r line; do
              if [[ "$line" == License:* ]]; then
                echo -e "License: ${GREEN}${line#License: }${RESET}"
              else
                echo "$line"
              fi
            done






    

          
